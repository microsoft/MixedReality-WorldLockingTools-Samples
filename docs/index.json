{
  "Advanced/Advanced.html": {
    "href": "Advanced/Advanced.html",
    "title": "Advanced samples | World Locking Tools Samples Documentation",
    "keywords": "Advanced samples This is the home for advanced samples of the use of World Locking Tools for Unity (WLT). An \"advanced\" sample should meet one or more of the following characteristics: Demonstrates the use of a lesser used WLT feature. Uses WLT along with an external library/system in a way that enhances the value of both. Accomplishes an otherwise difficult scenario using WLT in a novel way. Clarifies an otherwise difficult to grasp WLT concept via a concrete example. The following samples are currently available. Align Sub Scene - Multiple subspaces aligned independently. QR Space Pins - Printed QR codes used as external markers to align the Unity coordinate space with the physical world. WLT + ASA - Manipulating the global coordinate system using World Locking Tools, and then sharing that coordinate space across sessions and devices via Azure Spatial Anchors."
  },
  "Advanced/AlignSubScene/AlignSubScene.html": {
    "href": "Advanced/AlignSubScene/AlignSubScene.html",
    "title": "Align Sub Scene | World Locking Tools Samples Documentation",
    "keywords": "Align Sub Scene Summary An independent AlignmentManager is created and maintained to pin a subset of the scene independently from the alignment of the global Unity coordinate space. Why that is useful In its most general and powerful usage, World Locking Tools for Unity (WLT) is used to world-lock and pin the entire Unity coordinate system to a known relationship with the physical world. There are situations in which it is preferable to pin a subset of the scene, represented by a subtree in the scene hierarchy. This subtree can be independently pinned, and will independently adjust to maintain optimal alignment at its space pins. The accompanying video tries to make the distinction between pinning the model's coordinate space at strategic points versus manipulating the model into a new position and orientation. Project source assets https://github.com/microsoft/MixedReality-WorldLockingTools-Samples/tree/master/Advanced/AlignSubScene Dependencies Built on WLT version 1.5.8. Built with MRTK version v2.7.3. Built with Unity 2019.4.2f1. No further dependencies. Additional setup No special setup is required, but to fully experience it, you should set up some sort of proxy in your physical space. Take the relative distances between the space pins in the model, and put physical markers in your scene matching those dimensions (e.g. bits of masking tape). If necessary or convenient, the relative positions of the space pins can be changed to better fit your physical environment. Running the sample On startup, the nose of the space craft will be stuck in your head (at the origin). Take a step back. Grab any of the spheres and drag it into position to move the model's coordinate space. After positioning the first sphere, try to keep the other sphere's in a plausible new position as you move them. For that, having a physical proxy setup to give target to your sphere movements is helpful. Click on the physical environment to place placards. The WLT system will keep them bound to the physical environment. TwoIndependentSpaces.unity This scene takes the SpacePin feature a step further, using them to align multiple independent spaces within the scene. Note the use of the SpacePinVisualizer prefabs in the scene under the Visualizers object. There is one for each of the local (AlignSubTree) alignment managers, and one to visualize the global SpacePins. Special controls At any time, clicking on the scene (but not the model) will place a placard into the scene. The placard will be put in Unity global space, so will be unaffected by manipulations of the model's space. Clicking on a placard will delete it."
  },
  "Advanced/ASA/ASA.html": {
    "href": "Advanced/ASA/ASA.html",
    "title": "Using Azure Spatial Anchors with World Locking Tools for Unity | World Locking Tools Samples Documentation",
    "keywords": "Using Azure Spatial Anchors with World Locking Tools for Unity ASA + WLT Summary World Locking Tools for Unity (WLT) provides a stable coordinate system based on local tracking. When combined with Azure Spatial Anchors (ASA), that stable coordinate system can be persisted across sessions, and shared across devices. See the accompanying video for visual clarification. Project source assets https://github.com/microsoft/MixedReality-WorldLockingTools-Samples/tree/master/Advanced/ASA What is in this sample? This sample provides assets and scripts to: Configure Unity's global coordinate system with respect to the physical environment. Publish that coordinate system configuration to Azure using Azure Spatial Anchors. Retrieve the data from Azure to restore the coordinate system in later sessions or on other devices. Structure of this document Setup - How to install and deploy the sample application. A video walkthrough. Notes on running the application, along with suggested steps. Architectural description of the supporting scripts. Setup and tested versions This sample has been developed and tested using: Unity 2020.3.2f1 Azure Spatial Anchors (ASA) v2.9.0 Mixed Reality Toolkit v2.6.2 World Locking Tools for Unity v1.3.6 FrozenWorldEngine v1.1.1 It has been verified from those original versions through the following: Unity 2020.3.8f1 Azure Spatial Anchors (ASA) v2.12.0 Mixed Reality Toolkit v2.7.3 World Locking Tools for Unity v1.5.8 FrozenWorldEngine v1.1.1 The following instructions assume you are starting from the Unity assets as included in the WLT Samples github repo . Specifically, installing WLT and/or MRTK for this sample from the Mixed Reality Feature Tool is not supported. Install the Frozen World Engine DLL into the project The first step is to install the Frozen World Engine DLL, v1.1.1. Instructions here , using either NuGet for Unity, or command line nuget.exe. Install ASA Creating spatial anchor resources This Quick Start Guide goes through the steps to create an Azure account and the necessary spatial anchors resources. The Account Id, Account Domain, and Account Key will be necessary to run the sample. You will add them into the proper fields on the \"Spatial Anchor Manager\" script, on the SpacePinBinder object in the scene. Other authentication methods are supported, but the Account Id/Domain/Key is the easiest when getting started. Install the SDK Next, install Azure Spatial Anchors v2.9.0 using one of the methods described in these instructions . I used the MR Feature Tool method. Additional setup for Coarse Relocation When using Coarse Relocation, additional setup is required when deploying to Android or HoloLens2. What is Coarse Relocation? Coarse Relocation is a technology which allows you to search for previously created cloud anchors within your current vicinity. Additional details on Course Relocation can be found in the Course Relocation section of the Azure Spatial Anchors documentation . This sample demonstrates finding cloud anchors either by Coarse Relocation, or explicitly by cloud anchor id (GUID). If Coarse Relocation is enabled, the following additional setup steps are required. If you aren't interested in Coarse Relocation, you can disable it in the \"Publisher ASA\" component on the SpacePinBinder object. Additional setup steps for HoloLens2 To enable Coarse Relocation on HoloLens2, you must add a permission to the Package.appxmanifest file generated into ARM/WLT_ASA/Package.appxmanifest (assuming you selected the folder ARM as your build target). Add the following line into the Capabilities section: <DeviceCapability Name=\"wiFiControl\"/> For more information, see this post on github . In Project Settings/XR Plugin Management, make sure that Windows Mixed Reality is the selected Plugin-Provider under the UWP tab (OpenXR is also supported for WLT, but not tested yet with ASA). The MRTK profile XAmple XRSDK ToolkitConfigurationProfile in XAmpleApp/CustomProfiles is suitable for running on HoloLens2. Additional setup steps for Android To enable Coarse Relocation on Android, follow these instructions to configure the Assets/Plugins/Android/mainTemplate.gradle file. This should be included in the project already, but is worth checking. For your own project, you would have to configure that yourself. Also, in the Assets/Plugins/Android/AndroidManifest.xml included in the project, a lot of permissions are enabled in order to allow access to Wi-Fi on Android. Again, if incorporating elements of this project into your own project, you need to follow these steps as well in order to use Coarse Relocation. More details on required permissions to access Wi-Fi on Android are in this post , and the post it links to. When you hit Build & Run, if your build fails with a Shader error in the MRTK_Standard material, just try Build & Run again. It works second try for me. There is some info on that in the MRTK issues, but as far as I can tell all the info there is incorrect. In Project Settings/XR Plugin Management, make sure that ARCore is the selected Plugin-Provider under the Android tab. The MRTK profile XAmple AR ToolkitConfigurationProfile is suitable for running on mobile. Don't forget to run the script Mixed Reality Toolkit/Utilities/UnityAR/Update Scripting Defines after switching to Android or iOS. Video walkthrough This video might give you an idea what to expect when running the sample. Further details follow. What the buttons do Toggle Pins - When the SpacePins are not active, their manipulation handles may be hidden. Publish - Save the current configuration, enabling its retrieval in later session or on other devices. Load Oracle - Use previously stored bindings to restore a spatial configuration. Clear Oracle - Delete all backing resources, especially Azure spatial anchors, and clear the bindings oracle. Search - Find all Azure spatial anchors in the immediate vicinity, and restore the spatial configuration from them. Purge - Find all Azure spatial anchors in the immediate vicinity, and clear them. Reset Pins - Undo any Space Pin manipulations. Does not clear any Azure spatial anchors. The menu on mobile is slightly different in form, but button positions and meanings are the same. Walkthrough - Publish from HoloLens2 Place the scene using SpacePins When you start up the sample, the coordinate system is position and oriented based on the head tracker pose at startup. Which is to say, it is fairly arbitrary. The first thing to do is to adjust the coordinate system to a desired reference state. The sofa in the PinTestSofa scene is 2.18 meters long, 0.78m high, and 1.0m deep. The SpacePin handles on each end of the top back of the sofa are, therefore, 2.18m apart, and 0;78m off the ground. I recommend measuring and placing temporary markers 2.18m apart, at some convenient height. Alternatively, you can adjust the scene to fit your physical space. Having built and deployed the application to a HoloLens2 device, wait until the status on the floating menu says Ready (hint - the status line will go from red to white when ready). One at a time, grab each of the SpacePin handles (the white wireframe spheres) and drag it into position relative to your reference markers. After releasing each of the markers into position, the scene should have shifted to restore the back of the sofa relative to the SpacePin. The objects in the scene aren't being moved, the entire coordinate space is adjusted so that the original coordinates of the SpacePins are at the location in the physical world that you dragged them to. Publish the coordinate space Having established the space that you want, you can now Publish that space to make it available in later sessions and on other devices. If using Coarse Relocation, it's a good idea to clear out any previously created cloud anchors at this point. Hit the \"Purge from Search\" button and wait for that to complete. Now, on the floating menu, hit the \"Publish\" button and wait for it to complete. Walkthrough - Consume from HoloLens2 using Coarse Relocation Start the application again on a different HoloLens2 device, or on the same device after closing the previous session. When the status shows as Ready, press the \"Load from Search\" button. When the operation completes, the Unity global coordinate system will have realigned to your physical environment as it was in the previous (Published) session. Walkthrough - Consume from HoloLens2 using IBindingOracle (SpacePinBinderFile) When the bindings are published on a device, or when they are restored from search, they are recorded into an IBindingOracle. This sample includes the most basic Oracle, one that simply writes the bindings to a text file. Restart the application to a new session. If this is the same HoloLens2 as the Publish was performed from, then there is a binding file left from the publish. If this is a different HoloLens2, but a Search was successfully performed in a previous session, then the binding file will be left from that. Hit the \"Load from File\" button to load the previously recorded bindings and restore that coordinate space. Walkthrough - Consume from Android using Coarse Relocation The UX looks slightly different on Android, but works exactly the same. The main difference is that a little more scanning of the environment at startup is required relative to HoloLens2, before ASA is ready to proceed. When the system shows as Ready, you can hit the blue button (3rd from right) to search for the previously published bindings and restore the coordinate system. Walkthrough - Consume from Android using IBindingOracle (SpacePinBinderFile) Having successfully completed a Load from Search, a bindings file has been left on the device. In later sessions you can just hit Load from File to restore the coordinate system. Alternatively, you could just copy the bindings text file from the publishing device to the consuming device. The default location of the bindings text file is: HoloLens2: User Folders/LocalAppData/WLT-ASA/LocalState/BinderFile.txt Android: Internal shared storage/Android/data/com.WorldLockingTools.WLTASA/files/BinderFile.txt Software overview IBinder - binding SpacePins to Azure Spatial Anchors The IBinding interface is at the center. It is implemented here by the SpacePinBinder class . It is a Unity Monobehaviour, and may be configured either from Unity's Inspector or from script. Each IBinder is named , so a single IBindingOracle can manage bindings for multiple IBindings. IPublisher - reading and writing spatial anchors to the cloud The IPublisher interface handles publishing spatial anchors to the cloud, and then retrieving them in later sessions or on other devices. It is implemented here with the PublisherASA class . Pose data in the current physical space is captured and retrieved using Azure Spatial Anchors. When a spatial anchor is published, a cloud anchor id is obtained. This id may be used in later sessions or on other devices to retrieve the cloud anchor's pose in the current coordinate system, along with any properties stored with it. The system always adds a property identifying the cloud anchor's associated SpacePin. It should be noted that the IPublisher, and the PublisherASA, don't know anything about SpacePins. IPublisher doesn't know or care what will be done with the cloud anchor data. It simply provides a simplified awaitable interface for publishing and retrieving cloud anchors. Read versus Find If a cloud anchor's id is known, the cloud anchor may be retrieved by its id. This is the most robust way to retrieve a cloud anchor. This is Read . However, there are interesting scenarios in which the ids for the cloud anchors within an area aren't known by a device, but if they cloud anchors could be retrieved, their spatial data and properties would combine to provide enough information to make them useful. Find searches the area around a device for cloud anchors, and returns any that it was able to identify. This process is known as coarse relocation . IBindingOracle - sharing cloud anchor ids The IBindingOracle interface provides a means of persisting and sharing bindings between SpacePins and specific cloud anchors. Specifically, it persists space-pin-id/cloud-anchor-id pairs, along with the name of the IBinder. The oracle's interface is extremely simple. Given an IBinder, it can either Put the IBinder's bindings, or it can Get them. Put stores them, and Get retrieves them. The mechanism of storage and retrieval is left to the implementation of the concrete class implementing the IBindingOracle interface. This sample implements possibly the simplest possible IBindingOracle, in the form of the SpacePinBinderFile class . On Put, it writes the IBinder's bindings to a text file. On Get, it reads them from the text file (if available) and feeds them into the IBinder. ILocalPeg - blob marking a position in physical space The ILocalPeg interface is an abstraction of a device local anchor. In a more perfect world, the required ILocalPegs would be internally managed by the IPublisher. However, device local anchors work much better when created while the device is in the vicinity of the anchor's pose. The IPublisher only knows where the device local anchors should be placed when they are needed, not at the optimal time of creating them. The SpacePinASA does know when the best time to create its local anchor is. When the manipulation of the SpacePin ends and its pose set, the SpacePinASA requests the IPublisher to create an opaque local peg at the desired pose. The SpacePinBinder then pulls the ILocalPeg off the SpacePinASA, and passes it to the IPublisher to be used in creating a cloud spatial anchor . See also Azure Spatial Anchors Quick Start World Locking Tools for Unity"
  },
  "Advanced/Mobile/ARCore/ARCore.html": {
    "href": "Advanced/Mobile/ARCore/ARCore.html",
    "title": "Direct to ARCore | World Locking Tools Samples Documentation",
    "keywords": "Direct to ARCore Summary: This sample codes directly to Google's ARCore SDK for Unity. Note This sample is obsolete and deprecated. It is retained for reference purposes, but is no longer maintained. It is recommended to use the more general AR Foundation platform, as shown in the ASA example , or the basic XR SDK pattern as used everywhere else in the WLT samples. Dependencies: Built on WLT version 1.2.1. Incompatible with MRTK Built on Unity v2019.4.15f. Built on ARCore Unity SDK v1.22.0. Uses Frozen World Engine DLL v1.0.0 or later. Additional setup: Building the sample requires installing Google's ARCore Unity SDK v1.22.0 or later, including dependencies. These notes are intended to be helpful in setting up ARCore Unity SDK, but are no substitute for the official full documentation, which can be found at the following: https://developers.google.com/ar/develop/unity/quickstart-android The instructions here are trying to be brief. If anything is unclear, please refer to the full documentation for details. Installing dependencies From Unity Package Manager, install: Multiplayer HLAPI XR Legacy Input Helpers Installing ARCore Unity SDK Download the ARCore Unity SDK unity package from github . Import the .unitypackage into the Unity project. The examples may be imported or not, on your preference. Note ARCore as packaged is not in an assembly specialization. That is, it compiles into the predefined Assembly-CSharp.dll. Unfortunately, from the Unity documentation : Classes in assemblies created with an Assembly Definition cannot use types defined in the predefined assemblies. Therefore, in order for WLT to access and manage ARCore, ARCore must be moved into an Assembly Definition. This next step achieves that, by simply unpacking appropriate assembly definition (.asmdef) files onto the ARCore assets imported in the previous step. IMPORTANT: If the folder structure of the GoogleARCore assets is to be changed or renamed, first perform the following step. Import arcore-1.22.0-asmdef-fixup.unitypackage into your project. This unity package can be found in the Misc folder of this sample. It contains only assembly definition (.asmdef) files. Once the ARCore unitypackage and the fixup unitypackage have been imported, you may safely rename or move the GoogleARCore folder to match your organization. Ensure your build target is Android. In your project's Player Settings, in the XR section at the end, ensure that \"ARCore Supported\" is enabled. Adding WLT ARCore support to an existing project In addition to installing ARCore Unity SDK as described above, and of course installing WLT as described here , there are two additional steps in order to get WLT to target the ARCore SDK directly. First, the additional define of WLT_ARCORE_SDK_INCLUDED must be added to your project in Player Settings => Other Settings under the Android tab. Next, in the World Locking Context in the World Locking Manager prefab within your scene, in the Anchor Management settings, change the Anchor Subsystem to AR Core , as shown below. Note that you will need to uncheck the Use Defaults checkbox in order to change the subsystem type. Running the samples: Several sample scenes may be found in Assets/ARCoreSample/Scenes ARCoreWLT.unity This sample is the most elemental, the simplest possible application running WLT on top of ARCore. It does nothing but load a couple of cubes, which will remain fixed in physical space (contingent on tracking). Special controls: The sample includes the anchor graph visualization enabled. To disable WLT's anchor graph visualization, and get the truly simplest WLT on ARCore application possible, delete or disable the AnchorGraphVisual attached to the scene's WorldLocking object. Placement.unity This sample includes visualization of the found environment planes. Special controls: Tap the screen to place a coordinate frame representation where a ray cast intersects the environment's planes."
  },
  "Advanced/QRSpacePins/QRSpacePins.html": {
    "href": "Advanced/QRSpacePins/QRSpacePins.html",
    "title": "QR Space Pins sample | World Locking Tools Samples Documentation",
    "keywords": "QR Space Pins sample Summary The Space Pins feature of World Locking Tools is combined with QR code scanning to provide automatic snapping of a Unity scene to a physical environment. As the QR codes are physical features, this is an intrinsically shared experience. See also the accompanying video for some visual clarification. Project source assets https://github.com/microsoft/MixedReality-WorldLockingTools-Samples/tree/master/Advanced/QRSpacePins Dependencies Built on WLT v1.5.8. Built with MRTK v2.7.2. QR code from NuGet package 0.5.2112. VCRTForwarders.140 (QR code dependency) from NuGet package 1.0.7. Built with Unity 2019.4.2f1. Requires HoloLens2 for QR code scanning. Additional setup The QR code placement in the physical environment should match the QR code placement within the scene. For the virtual markers, look at objects \"HouseHold > BarnMarkers > Markers > QRCode_N\", where N is the integers 1 through 4. Sample QR codes as .png files, suitable for printing and scanning, are in the folder Assets/QRSpacePin/SampleQRCodes. Note that the data embedded in each QR code is the file name without the extension. For example, the data embedded in QRCode_01.png is the string \"QRCode_01\". We'll talk more about the QR code data later. You will need to either hang your printed QR codes so that their relative poses match the relative poses in the sample Unity scene, or adjust the poses of the SpacePin objects in the scene to match where you have placed the QR code printouts in your physical environment. It is very unlikely that you have a suitable physical environment to match the layout in the Unity scene. Therefore, you will probably need to adjust the poses of the SpacePin objects in the Unity scene to match where you've put your printed QR codes. I recommend that you affix the printouts to walls surrounding your workspace, because they are easier to scan at eye level, and you will get the highest quality when you are between two or more SpacePins. A hypothetical example of scanned QR code position and orientation (not reflecting either of the contained samples) Consider the following configuration. Unity scene The position of QRCode_1 is (0,0,0), and its orientation is horizontal with the top pointed along positive X. Physical environment The printed QR code is at your feet, with the top pointed north. Result The Unity scene will appear with the origin at your feet, and the positive X axis pointed north. More about the QR code data Inputs for the SpacePin feature The SpacePin feature repositions and reorients the coordinate space to match your specification. For the system to align the coordinate space the way you want, you need to tell it what you want. To indicate the alignment you want, you tell the system the current pose at some position in space, and the pose that you want it to have there. The system then does whatever it needs to make it so. In a perfect world, we would be done. But because of tracking error, numerical precision, and the rest of the usual gang of mathematical problems, you would find that the farther you got from the position you specified, the less accurate the alignment would be. To avoid this problem, the system lets you give current/desired position pairs at multiple points in space. See the SpacePin documentation , and elsewhere in the World Locking Tools conceptual documentation for further details. Getting SpacePin inputs from QR codes Having established that we need two pieces of information, the current pose at a point in space, and the pose we'd like our coordinate system to have at the point in space. For the current pose, if we place a printed QR code somewhere in our physical environment, and scan it, the QR code system will tell us what its current pose is. That's half of the problem solved. For the second half, we place corresponding proxies in our Unity scene in such a way that the pose of the proxy is the desired pose in our coordinate space. For example, if you want the origin of your coordinate space (the (0,0,0) point) to be at the center of your physical room, you could print a QR code and tape it down in the center of your room. Then place a SpacePin at the origin of your Unity scene. At runtime, when you scan your physical QR code, you get back a pose in Unity's global coordinate space. You pass that to the SpacePin as the current pose, and the SpacePin takes its pose in Unity space (0,0,0) as the desired pose, and moves the coordinate space so that the origin is aligned with the printed QR code in the center of the room. You can then repeat this process with more printed QR codes about your physical space and more SpacePins about your Unity scene to achieve the desired stability and accuracy. The QR code data string You may have noticed a problem. If you have multiple printed QR codes, and multiple SpacePins in the scene, then when you scan a QR code, how do you know which SpacePin to feed the scanned pose into? There are a lot of ways you could address this problem, and which way is best will depend on your application. The sample embeds the index of the corresponding SpacePin into the printed QR code's data string. The encoding is exceedingly simple, and in fact was chosen for its simplicity. Basically, the application finds the last underscore '_' character in the data string, and tries to interpret the substring after it as an integer. If it succeeds, and if the integer is a valid index, then it associates the scanned QR code's pose with the indexed SpacePin. See QRSpacePinGroup.ExtractIndex() for the implementation. It is expected that you would replace this member with something more tuned to your application. Note that in this simple implementation, the number in the QR code data string is one higher than the zero based index. For example, \"IgnoredString_01\" would resolve to the index 0, which is the first SpacePin in the QRSpacePinGroup. In the samples, that happens to be a SpacePin named \"QRSpacePin_1\". Running the sample Deploy the scene QRSpacePins.unity and start the application. Scan your printed QR codes by walking to them. The smaller the printed QR code the closer you'll need to get to it to scan it. A 5x5cm printed code will need to be within about 20 cm to scan. The codes can be scanned in any order. The scanned codes can be cleared at any time with the voice command \"Clear Space Pins\". You can then start over scanning. The 2nd scene QRSubScene is identical to QRSpacePins, with one significant exception. Whereas QRSpacePins aligns the entire Unity coordinate space to put the virtual QR codes at the physical QR markers, QRSubScene applies that transformation only to the root of the Household subtree of the scene graph. It accomplishes this using the AlignSubtree script placed on the Household node. See the AlignSubScene sample , which explores alignment of independent coordinate spaces with the physical world in greater detail. For further details on the AlignSubtree script, consult the World Locking Tools for Unity documentation . Special controls Speech commands Command Result Clear Space Pins Resets all QR codes and pins to startup Toggle World Lock Toggles whether the World Locking Tools are active Known issues None See Also QR code tracking overview Unity QR code sample SpacePin discussion"
  },
  "CODE_OF_CONDUCT.html": {
    "href": "CODE_OF_CONDUCT.html",
    "title": "Microsoft Open Source Code of Conduct | World Locking Tools Samples Documentation",
    "keywords": "Microsoft Open Source Code of Conduct This project has adopted the Microsoft Open Source Code of Conduct . Resources: Microsoft Open Source Code of Conduct Microsoft Code of Conduct FAQ Contact opencode@microsoft.com with questions or concerns"
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing | World Locking Tools Samples Documentation",
    "keywords": "Contributing Contributing ideas Suggestions for further samples, fixes for the current samples, clarification of documentation, or extension of the samples included are all very welcome. You are, of course, free and encouraged to develop your own samples as well. Be aware that there are restrictions on what samples can be hosted as part of this site, so if your sole intention is to put a sample here, it's best to check (by issuing a proposal ) first before investing a lot of time. But if you have made something you think others might find useful, we would be happy to have a look. See the guidelines below for a smoother experience for yourself and reviewers. Contributing samples The most stringent requirement on samples is that they are well documented. Any scripts should be clear, with docfx compliant comments. This generally just means following C#'s XML code documentation practices , which many would say you should be doing anyway. Further, a detailed writeup should accompany the sample, as a markdown file in the sample's project root. For example, if your sample is in Advanced/NicelyDone, then you should have accompanying documentation in Advanced/NicelyDone/NicelyDone.md. Other supporting documentation you wish to include can be placed in the same folder as the markdown file. Images may be placed in a subfolder of DocGen/Images. At a minimum, the documentation markdown file should include all of the information in this template . Submitting a Pull Request In general, working from a fork of the repo is preferable over just creating a feature branch. But we all try to remain flexible in our workflows. Once you have a cleaned up working sample and appropriate documentation, you can submit a pull request for it to be merged into the master branch. Any pull request will require review before acceptance. Depending on the complexity of your contribution, and the clarity of the code and documentation, as well as the current workload of potential reviewers, the time for review may vary widely. Every effort will be made to provide feedback within 48 hours of submission. If you've had no response within a week, it is perfectly reasonable to reach out to one of the administrators to check the status. Additional notes This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com . When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments."
  },
  "DocGen/Documentation/Introduction.html": {
    "href": "DocGen/Documentation/Introduction.html",
    "title": "Introduction | World Locking Tools Samples Documentation",
    "keywords": "Introduction About the Samples Each sample is a self-contained Unity project. While that introduces a lot of redundancy between samples, it means that you don't have to wonder if something in a project is necessary. If the sample within that project doesn't use QR code scanning, then the QR code NuGet package won't be installed in that project. General samples covering many scenarios can be found in the main WLT repo. This sibling repository allows the extension of sample coverage without bloating out the main repository. Grouping The samples can be thought of as forming two groups. The first group is for very basic and slimmed down scenarios. The main repo's project can't show what a project looks like without adding the WorldLocking.Tools package because the Tools are, of course, included in that project. This limits some of the tutorials we would like to cover. The second group is for advanced scenarios. More advanced usages often leverage the World Locking Tools capabilities to amplify the value from other, independent software and services. While these services might be only a NuGet feed away, bloating the core WLT repo with every NuGet package that might be useful for a sample is a frightening prospect. Organization The two groups of samples are distributed in this repository as shown. This table will be updated as new Samples come online. Links to documentation for each is included in the table. Each sample contains enough documentation to run it, along with enough conceptual background to understand what it is doing, and enough motivational background to understand why one might be inclined to do so. Folder Project Description Tutorials Projects slimmed down to make a single point. Minimal The minimal setup of WLT to world-lock an application. Advanced Complex projects, often leveraging external dependencies. AlignSubScene Aligning multiple independent spaces. QRSpacePins QR codes as external alignment markers."
  },
  "DocGen/Documentation/NOTICE.html": {
    "href": "DocGen/Documentation/NOTICE.html",
    "title": "| World Locking Tools Samples Documentation",
    "keywords": "NOTICES AND INFORMATION Do Not Translate or Localize This software incorporates material from third parties. Microsoft makes certain open source code available at http://3rdpartysource.microsoft.com , or you may send a check or money order for US $5.00, including the product name, the open source component name, and version number, to: Source Code Compliance Team Microsoft Corporation One Microsoft Way Redmond, WA 98052 USA Notwithstanding any other terms, you may reverse engineer this software to the extent required to debug changes to any libraries licensed under the GNU Lesser General Public License. Oculus Controller Images Copyright (c) Facebook Technologies, LLC and its affiliates. All rights reserved. Art Attribution License 1.0 You may use these images solely for referring to the corresponding product in your video game or VR experience (including manuals for users). Otherwise, you may not use these images, or any trademarks, logos or other intellectual property owned by Facebook Technologies, LLC formerly known as Oculus VR, LLC (“Oculus”), including but not limited to use on merchandise or other product such as clothing, hats, or mugs. Do not use the Oculus images in a way that implies a partnership, sponsorship or endorsement; or features Oculus on materials associated with pornography, illegal activities, or other materials that violate Oculus Terms. THE IMAGES ARE PROVIDED TO YOU ON AN “AS IS” BASIS AND YOU ARE SOLELY RESPONSIBLE FOR YOUR USE OF THE IMAGES. OCULUS DISCLAIMS ALL WARRANTIES REGARDING THE IMAGES, INCLUDING WARRANTIES OF NON-INFRINGEMENT. OCULUS SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR PUNITIVE DAMAGES ARISING FROM OR RELATED TO YOUR USE OF THE IMAGES. For the avoidance of doubt, this license shall not apply to the Oculus name, trademark or service mark, logo or design OpenVR Copyright (c) 2015 Valve Corporation. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Unity 3D Async Await Util Copyright (c) 2016 Modest Tree Media Inc Licensed under the MIT License. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Visual Profiler Copyright (c) Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE"
  },
  "DocGen/Documentation/SampleDocTemplate.html": {
    "href": "DocGen/Documentation/SampleDocTemplate.html",
    "title": "Title of this very instructive sample | World Locking Tools Samples Documentation",
    "keywords": "Title of this very instructive sample Summary: This is demonstrated, highlighting that. Dependencies: Built on WLT version ???. Built with MRTK version ??? (if included). Any additional libraries pulled in via NuGet etc, including version. Additional setup: Any modifications to the code or assets needed in order to build, deploy, and run on someone elses machine. Running the sample: Brief walk through of: Startup – where are you? Next steps – how do you get to the good stuff? Conclusion – what should you have experienced? Special controls: Any speech commands, UX, etc. What does one need to know to fully experience the sample?"
  },
  "DocGen/SourceDoc/SourceReference.html": {
    "href": "DocGen/SourceDoc/SourceReference.html",
    "title": "Source code reference documentation | World Locking Tools Samples Documentation",
    "keywords": "Source code reference documentation Find reference material generated from source code comments for the sample applications here. See also World Locking Tools source code reference ."
  },
  "DocGen/Temp/api/ARCoreTest.html": {
    "href": "DocGen/Temp/api/ARCoreTest.html",
    "title": "Namespace ARCoreTest | World Locking Tools Samples Documentation",
    "keywords": "Namespace ARCoreTest Classes PlaceObject"
  },
  "DocGen/Temp/api/ARCoreTest.PlaceObject.html": {
    "href": "DocGen/Temp/api/ARCoreTest.PlaceObject.html",
    "title": "Class PlaceObject | World Locking Tools Samples Documentation",
    "keywords": "Class PlaceObject Inheritance Object PlaceObject Namespace : ARCoreTest Assembly : cs.temp.dll.dll Syntax public class PlaceObject : MonoBehaviour Fields prefabScale Declaration public float prefabScale Field Value Type Description Single prefabToPlace Declaration public GameObject prefabToPlace Field Value Type Description GameObject"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.ActionCube.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.ActionCube.html",
    "title": "Class ActionCube | World Locking Tools Samples Documentation",
    "keywords": "Class ActionCube Simple object for interaction. Not to be taken seriously. Inheritance Object ActionCube ActionPublish Namespace : Microsoft.MixedReality.WorldLocking.ASA.Examples Assembly : cs.temp.dll.dll Syntax public class ActionCube : MonoBehaviour Methods ChangeColorForSeconds(Single, Color) Declaration protected Task<bool> ChangeColorForSeconds(float seconds, Color color) Parameters Type Name Description Single seconds Color color Returns Type Description Task < Boolean > DoThing() Declaration protected virtual void DoThing() OnSelect() Declaration public void OnSelect() RestoreColors() Declaration protected void RestoreColors() SetColors(Color) Declaration protected void SetColors(Color color) Parameters Type Name Description Color color"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.ActionPublish.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.ActionPublish.html",
    "title": "Class ActionPublish | World Locking Tools Samples Documentation",
    "keywords": "Class ActionPublish Script for implementing button actions. Simple passthrough to perform publisher actions on interaction events. Inheritance Object ActionCube ActionPublish Inherited Members ActionCube.DoThing() ActionCube.ChangeColorForSeconds(Single, Color) ActionCube.SetColors(Color) ActionCube.RestoreColors() ActionCube.OnSelect() Namespace : Microsoft.MixedReality.WorldLocking.ASA.Examples Assembly : cs.temp.dll.dll Syntax public class ActionPublish : ActionCube Fields finishSeconds Declaration public float finishSeconds Field Value Type Description Single notReadyColor Declaration public Color notReadyColor Field Value Type Description Color spacePinBinder Declaration public SpacePinBinder spacePinBinder Field Value Type Description SpacePinBinder spacePinBinderFile Declaration public SpacePinBinderFile spacePinBinderFile Field Value Type Description SpacePinBinderFile statusLine Declaration public TextMeshPro statusLine Field Value Type Description TextMeshPro workingColor Declaration public Color workingColor Field Value Type Description Color Methods DoClear() Declaration public void DoClear() DoDownload() Declaration public void DoDownload() DoPublish() Declaration public void DoPublish() DoPurge() Declaration public void DoPurge() DoReset() Declaration public void DoReset() DoSearch() Declaration public void DoSearch() DoTogglePin() Declaration public void DoTogglePin()"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.html",
    "title": "Namespace Microsoft.MixedReality.WorldLocking.ASA.Examples | World Locking Tools Samples Documentation",
    "keywords": "Namespace Microsoft.MixedReality.WorldLocking.ASA.Examples Classes ActionCube Simple object for interaction. Not to be taken seriously. ActionPublish Script for implementing button actions. Simple passthrough to perform publisher actions on interaction events. PlatformMenuSelector Simple script to select between equivalent menus at build time based on platform. ScreenSpacer Adjust a menu based on whether camera is in portrait or landscape mode. SpacePinASAManipulation Component that adds MRTK object manipulation capabilities on top of the auto-orienting SpacePinOrientable. Startup Perform one off actions at startup."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.PlatformMenuSelector.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.PlatformMenuSelector.html",
    "title": "Class PlatformMenuSelector | World Locking Tools Samples Documentation",
    "keywords": "Class PlatformMenuSelector Simple script to select between equivalent menus at build time based on platform. Inheritance Object PlatformMenuSelector Namespace : Microsoft.MixedReality.WorldLocking.ASA.Examples Assembly : cs.temp.dll.dll Syntax public class PlatformMenuSelector : MonoBehaviour"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.ScreenSpacer.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.ScreenSpacer.html",
    "title": "Class ScreenSpacer | World Locking Tools Samples Documentation",
    "keywords": "Class ScreenSpacer Adjust a menu based on whether camera is in portrait or landscape mode. Inheritance Object ScreenSpacer Namespace : Microsoft.MixedReality.WorldLocking.ASA.Examples Assembly : cs.temp.dll.dll Syntax public class ScreenSpacer : MonoBehaviour Properties Target Declaration public Transform Target { get; set; } Property Value Type Description Transform"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.SpacePinASAManipulation.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.SpacePinASAManipulation.html",
    "title": "Class SpacePinASAManipulation | World Locking Tools Samples Documentation",
    "keywords": "Class SpacePinASAManipulation Component that adds MRTK object manipulation capabilities on top of the auto-orienting SpacePinOrientable. Inheritance Object SpacePinASA SpacePinASAManipulation Inherited Members SpacePinASA.LocalPeg SpacePinASA.Publisher SpacePinASA.SpacePinId SpacePinASA.Properties SpacePinASA.IsReadyForPublish SpacePinASA.SetLocalPeg(ILocalPeg) SpacePinASA.ConfigureLocalPeg() Namespace : Microsoft.MixedReality.WorldLocking.ASA.Examples Assembly : cs.temp.dll.dll Syntax public class SpacePinASAManipulation : SpacePinASA Properties AllowRotation Whether to show the MRTK rotation gizmos. Declaration public bool AllowRotation { get; set; } Property Value Type Description Boolean Remarks Rotating the SpacePinOrientableManipulation object only has any effect when the first pin is manipulated. Once the second object is manipulated, and ever after, the orientation is implied by the alignment of the pin objects, and actual orientation of the objects is ignored. Prefab_FeelerRay Proxy renderable to show axis alignment during manipulations. Declaration public GameObject Prefab_FeelerRay { get; set; } Property Value Type Description GameObject Methods OnDestroy() Shutdown the manipulation controls. Declaration protected override void OnDestroy() Start() Start(), and set up MRTK manipulation controls. Declaration protected override void Start()"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.Startup.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.Examples.Startup.html",
    "title": "Class Startup | World Locking Tools Samples Documentation",
    "keywords": "Class Startup Perform one off actions at startup. Inheritance Object Startup Namespace : Microsoft.MixedReality.WorldLocking.ASA.Examples Assembly : cs.temp.dll.dll Syntax public class Startup : MonoBehaviour"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.html",
    "title": "Namespace Microsoft.MixedReality.WorldLocking.ASA | World Locking Tools Samples Documentation",
    "keywords": "Namespace Microsoft.MixedReality.WorldLocking.ASA Classes LocalPegAndProperties A local peg, with an associated properties dictionary. PublisherASA Implementation of IPublisher using ASA to push anchors to and retrieve them from the cloud. ReadinessStatus Class wrapping the readiness state, along with the progress to readiness to create cloud anchors SpacePinASA SpacePinASA.KeyValPair SpacePinBinder Implementation of the IBinder interface, managing the relationship between space pins and cloud anchors. SpacePinBinderFile Simple implementation of an IBindingOracle interface, which puts and gets binding from file locally. Structs SpacePinCloudBinding A binding between a space pin and a cloud anchor, by their respective id's. Interfaces IBinder Interface for a binding layer between space pins and cloud anchors. IBindingOracle Interface for a magical oracle that communicates IBinder bindings across space and time. ILocalPeg A data blob with enough information to be saved to the cloud and reconstructed from the cloud in a later session or on a different device. IPublisher The IPublisher abstracts the process of publishing and downloading cloud anchors. Enums PublisherReadiness Readiness states."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.IBinder.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.IBinder.html",
    "title": "Interface IBinder | World Locking Tools Samples Documentation",
    "keywords": "Interface IBinder Interface for a binding layer between space pins and cloud anchors. Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public interface IBinder Remarks This abstraction isn't so much for multiple implementations, as for providing a clean API. The IBinder is responsible for managing the mapping between the cloud anchors, which persist and transmit pose data, and the space pins, which use that data to create shared spaces. Properties IsReady If the binder is ready to execute tasks. Declaration bool IsReady { get; } Property Value Type Description Boolean Remarks Reasons not be be ready include initialization not complete, or already busy on another task. Name The name of this binder. Declaration string Name { get; } Property Value Type Description String PublisherStatus The current status of the publisher. Declaration ReadinessStatus PublisherStatus { get; } Property Value Type Description ReadinessStatus Methods Clear() Delete all known (bound) cloud anchors from the cloud, and erase their bindings. Declaration Task<bool> Clear() Returns Type Description Task < Boolean > True on success. Remarks Bound space pins are unaffected, but will no longer be bound. CreateBinding(String, String) Set the cloud anchor id associated with this space pin. Declaration bool CreateBinding(string spacePinId, string cloudAnchorId) Parameters Type Name Description String spacePinId Name of the space pin to be bound to this cloud id. String cloudAnchorId Cloud id to be bound to the space pin. Returns Type Description Boolean False if space pin is unknown. Space pin must be registered before being bound. Remarks A space pin must be bound to a cloud anchor id before it can be downloaded. Download() Pull down cloud anchors for all known bindings, and apply them to the bound space pins. Declaration Task<bool> Download() Returns Type Description Task < Boolean > True on success. GetBindings() Known bindings between space pins and cloud anchors. Declaration IReadOnlyList<SpacePinCloudBinding> GetBindings() Returns Type Description IReadOnlyList < SpacePinCloudBinding > Publish() Publish all active space pins to the cloud. Declaration Task<bool> Publish() Returns Type Description Task < Boolean > True on success. Remarks Space pins which are previously published in this session, i.e. that have a binding to a cloud anchor, will have that cloud anchor deleted first, and a new binding created to the newly published cloud anchor. To be publishable, a SpacePin must have an ILocalPeg created from CreateLocalPeg(String, Pose) . The SpacePinASA manages this automatically. Purge() Find all cloud anchors in the area, delete them, and release their bindings. Declaration Task<bool> Purge() Returns Type Description Task < Boolean > True on success. RemoveBinding(String) Erase a binding between a space pin and its corresponding cloud anchor. Declaration bool RemoveBinding(string spacePinId) Parameters Type Name Description String spacePinId Space pin to unbind. Returns Type Description Boolean True if found and unbound. Remarks Neither the space pin nor the cloud anchor are affected by this, but will be independent of one another after. Search() Search for cloud anchors in the area, download them, and apply to associated space pins. Declaration Task<bool> Search() Returns Type Description Task < Boolean > True on success"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.IBindingOracle.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.IBindingOracle.html",
    "title": "Interface IBindingOracle | World Locking Tools Samples Documentation",
    "keywords": "Interface IBindingOracle Interface for a magical oracle that communicates IBinder bindings across space and time. Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public interface IBindingOracle Remarks Note that the IBindingOracle only transmits bindings, which are string pairs of SpacePinId and CloudAnchorId. It does not cause the binder to do anything with those bindings. Properties Name The name of this oracle. Declaration string Name { get; } Property Value Type Description String Methods Get(IBinder) Retrieve bindings from the ethereal plane. Declaration bool Get(IBinder binder) Parameters Type Name Description IBinder binder The binder to add the bindings to. Returns Type Description Boolean True on success. Put(IBinder) Broadcast the bindings. Declaration bool Put(IBinder binder) Parameters Type Name Description IBinder binder The binder whose bindings should be broadcast. Returns Type Description Boolean True on success."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.ILocalPeg.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.ILocalPeg.html",
    "title": "Interface ILocalPeg | World Locking Tools Samples Documentation",
    "keywords": "Interface ILocalPeg A data blob with enough information to be saved to the cloud and reconstructed from the cloud in a later session or on a different device. Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public interface ILocalPeg Remarks In a better world, this construct would be hidden in the internals of the IPublisher interface. Unfortunately, the IPublisher doesn't know when the best time to create a local peg is, and so has to leave that to the application. See CreateLocalPeg(String, Pose) . In general, a local peg will be of better quality if it is created when the tracker is near the local peg's location, and the area has been adequately scanned. Properties GlobalPose The current global pose for the blob. Declaration Pose GlobalPose { get; } Property Value Type Description Pose IsReadyForPublish Is there enough information to publish this anchor to the cloud? Declaration bool IsReadyForPublish { get; } Property Value Type Description Boolean Name The name for this peg. Declaration string Name { get; } Property Value Type Description String"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.IPublisher.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.IPublisher.html",
    "title": "Interface IPublisher | World Locking Tools Samples Documentation",
    "keywords": "Interface IPublisher The IPublisher abstracts the process of publishing and downloading cloud anchors. Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public interface IPublisher Properties Status Get the current status, including progress to readiness to create. Declaration ReadinessStatus Status { get; } Property Value Type Description ReadinessStatus Remarks The publisher processes requests when its ReadinessStatus.readiness == Readiness.Ready. If that is not the current status, methods will return an error, unless otherwise noted. Methods Create(LocalPegAndProperties) Create a cloud anchor corresponding to the input local peg and its properties. Declaration Task<string> Create(LocalPegAndProperties pegAndProps) Parameters Type Name Description LocalPegAndProperties pegAndProps Peg and properties to be captured to the cloud. Returns Type Description Task < String > Awaitable identifier for the cloud anchor. CreateLocalPeg(String, Pose) Create a local position holder blob. Declaration Task<ILocalPeg> CreateLocalPeg(string id, Pose lockedPose) Parameters Type Name Description String id Unique name to give the local peg. Pose lockedPose The position in WLT.LockedSpace to capture Returns Type Description Task < ILocalPeg > Awaitable created blob. Remarks This can be called anytime, regardless of the ReadinessStatus. See ILocalPeg for more details. Delete(String) Delete the indicated cloud anchor from the cloud database. Declaration Task Delete(string cloudAnchorId) Parameters Type Name Description String cloudAnchorId Cloud anchor to destroy. Returns Type Description Task Awaitable task. Find(Single) Search the area around the device for cloud anchors. Declaration Task<Dictionary<string, LocalPegAndProperties>> Find(float radiusFromDevice) Parameters Type Name Description Single radiusFromDevice Distance (roughly) from device to search. Returns Type Description Task < Dictionary < String , LocalPegAndProperties >> Awaitable dictionary of cloud anchor ids and corresponding local peg and properties. Modify(String, LocalPegAndProperties) Delete a cloud anchor, and create a new one based on input local peg and its properties. Declaration Task<string> Modify(string cloudAnchorId, LocalPegAndProperties pegAndProps) Parameters Type Name Description String cloudAnchorId Cloud anchor to delete. LocalPegAndProperties pegAndProps Local anchor and properties to create new cloud anchor from. Returns Type Description Task < String > Awaitable identifier for the new cloud anchor. PurgeArea(Single) Search the area around the device, and destroy any anchors found. Declaration Task PurgeArea(float radius) Parameters Type Name Description Single radius Distance (roughly) from device to search. Returns Type Description Task Awaitable task. Read(IReadOnlyCollection<String>) Download a list of cloud anchors by id. Declaration Task<Dictionary<string, LocalPegAndProperties>> Read(IReadOnlyCollection<string> cloudAnchorIds) Parameters Type Name Description IReadOnlyCollection < String > cloudAnchorIds List of ids to download. Returns Type Description Task < Dictionary < String , LocalPegAndProperties >> Dictionary of LocalPegAndProperties by cloudAnchorId. Remarks If any cloud anchor ids have already been downloaded this session, and are still retained, those cached records will be refreshed and returned. Read(String) Download a cloud anchor with the given identifier. Declaration Task<LocalPegAndProperties> Read(string cloudAnchorId) Parameters Type Name Description String cloudAnchorId Identifier for the desired cloud anchor. Returns Type Description Task < LocalPegAndProperties > Awaitable local peg and its properties that were used to create the cloud anchor are reconstructed and returned. ReleaseLocalPeg(ILocalPeg) Free up the resources from an ILocalPeg. Declaration void ReleaseLocalPeg(ILocalPeg peg) Parameters Type Name Description ILocalPeg peg The peg to clean up. Remarks Param \"peg\" will be invalid after this call."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.LocalPegAndProperties.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.LocalPegAndProperties.html",
    "title": "Class LocalPegAndProperties | World Locking Tools Samples Documentation",
    "keywords": "Class LocalPegAndProperties A local peg, with an associated properties dictionary. Inheritance Object LocalPegAndProperties Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public class LocalPegAndProperties Constructors LocalPegAndProperties(ILocalPeg, IDictionary<String, String>) Declaration public LocalPegAndProperties(ILocalPeg lp, IDictionary<string, string> props) Parameters Type Name Description ILocalPeg lp IDictionary < String , String > props Fields localPeg Declaration public readonly ILocalPeg localPeg Field Value Type Description ILocalPeg properties Declaration public readonly IDictionary<string, string> properties Field Value Type Description IDictionary < String , String >"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.PublisherASA.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.PublisherASA.html",
    "title": "Class PublisherASA | World Locking Tools Samples Documentation",
    "keywords": "Class PublisherASA Implementation of IPublisher using ASA to push anchors to and retrieve them from the cloud. Inheritance Object PublisherASA Implements IPublisher Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public class PublisherASA : MonoBehaviour, IPublisher Remarks PublisherASA is a Monobehaviour to allow exposing properties in the inspector. Properties AnchorsParent Transform to attach created anchors to. Should have identity global pose. Declaration public Transform AnchorsParent { get; set; } Property Value Type Description Transform AnchorsPrefab Object to instantiate wherever native anchors are created to visualize their placement. Declaration public GameObject AnchorsPrefab { get; set; } Property Value Type Description GameObject Remarks These are intended for debugging and development. BeaconUuids Beacon ids to use in coarse reloctaion. Declaration public List<string> BeaconUuids { get; } Property Value Type Description List < String > CoarseRelocationEnabled Enable coarse relocation. Declaration public bool CoarseRelocationEnabled { get; set; } Property Value Type Description Boolean Remarks This must be set before calling Setup to have any effect. CoarseRelocPublishEnabled Whether relocation data will be included in published cloud anchors. Declaration public bool CoarseRelocPublishEnabled { get; set; } Property Value Type Description Boolean Remarks With this enabled, extra initialization will be done, and the readiness state will be less reliable. If cloud anchor ids will be explicitly shared via file or network communications, this should be disabled. CoarseRelocUseBluetooth Whether use of bluetooth beacons is to be used in coarse relocation. Declaration public bool CoarseRelocUseBluetooth { get; } Property Value Type Description Boolean Remarks To enable use of bluetooth beacons, add some beacon uuids to BeaconUuids. CoarseRelocUseGPS Augment cloud anchors with GPS data to allow them to be found via course relocation. Declaration public bool CoarseRelocUseGPS { get; set; } Property Value Type Description Boolean CoarseRelocUseWifi Augment cloud anchors with wifi data to allow them to be found via course relocation. Declaration public bool CoarseRelocUseWifi { get; set; } Property Value Type Description Boolean MaxSearchSeconds Maximum number of seconds to search without finding any anchors before giving up. Declaration public float MaxSearchSeconds { get; set; } Property Value Type Description Single MaxWaitForMoreAnchorsSeconds Max number seconds to wait for more anchors, after having found some. Declaration public float MaxWaitForMoreAnchorsSeconds { get; set; } Property Value Type Description Single MinRecommendedForCreateProgress The minimum value of the recommended-for-create-progress float before allowing creation of cloud anchors. Declaration public float MinRecommendedForCreateProgress { get; set; } Property Value Type Description Single Status Declaration public ReadinessStatus Status { get; } Property Value Type Description ReadinessStatus Methods Create(LocalPegAndProperties) Declaration public Task<string> Create(LocalPegAndProperties pegAndProps) Parameters Type Name Description LocalPegAndProperties pegAndProps Returns Type Description Task < String > CreateLocalPeg(String, Pose) Declaration public Task<ILocalPeg> CreateLocalPeg(string id, Pose lockedPose) Parameters Type Name Description String id Pose lockedPose Returns Type Description Task < ILocalPeg > Delete(String) Declaration public Task Delete(string cloudAnchorId) Parameters Type Name Description String cloudAnchorId Returns Type Description Task Find(Single) Declaration public Task<Dictionary<string, LocalPegAndProperties>> Find(float radiusFromDevice) Parameters Type Name Description Single radiusFromDevice Returns Type Description Task < Dictionary < String , LocalPegAndProperties >> Modify(String, LocalPegAndProperties) Declaration public Task<string> Modify(string cloudAnchorId, LocalPegAndProperties peg) Parameters Type Name Description String cloudAnchorId LocalPegAndProperties peg Returns Type Description Task < String > PurgeArea(Single) Declaration public Task PurgeArea(float radius) Parameters Type Name Description Single radius Returns Type Description Task Read(IReadOnlyCollection<String>) Declaration public Task<Dictionary<string, LocalPegAndProperties>> Read(IReadOnlyCollection<string> cloudAnchorIds) Parameters Type Name Description IReadOnlyCollection < String > cloudAnchorIds Returns Type Description Task < Dictionary < String , LocalPegAndProperties >> Read(String) Declaration public Task<LocalPegAndProperties> Read(string cloudAnchorId) Parameters Type Name Description String cloudAnchorId Returns Type Description Task < LocalPegAndProperties > ReleaseLocalPeg(ILocalPeg) Declaration public void ReleaseLocalPeg(ILocalPeg peg) Parameters Type Name Description ILocalPeg peg Setup() Initialization. Declaration public void Setup() Remarks Note that this is asynchronous. Status.readiness will be Readiness.Ready when setup is complete. Implements IPublisher"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.PublisherReadiness.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.PublisherReadiness.html",
    "title": "Enum PublisherReadiness | World Locking Tools Samples Documentation",
    "keywords": "Enum PublisherReadiness Readiness states. Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public enum PublisherReadiness Remarks The publisher is only able to process requested tasks when its state is \"Ready\". Fields Name Description Busy NoManager NotReadyToCreate NotReadyToLocate NotSetup Ready Starting"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.ReadinessStatus.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.ReadinessStatus.html",
    "title": "Class ReadinessStatus | World Locking Tools Samples Documentation",
    "keywords": "Class ReadinessStatus Class wrapping the readiness state, along with the progress to readiness to create cloud anchors Inheritance Object ReadinessStatus Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public class ReadinessStatus Remarks The floating point progress indicators are a bleed-through of the internal implementation, but are very useful to the application/user when establishing tracking. Constructors ReadinessStatus() Default constructor. Declaration public ReadinessStatus() ReadinessStatus(PublisherReadiness) Constructor setting readiness, leaving progress indicators at defaults. Declaration public ReadinessStatus(PublisherReadiness r) Parameters Type Name Description PublisherReadiness r ReadinessStatus(PublisherReadiness, Single, Single) Full constructor. Declaration public ReadinessStatus(PublisherReadiness r, float recommended, float ready) Parameters Type Name Description PublisherReadiness r Readiness to set. Single recommended Recommended for create progress value. Single ready Ready for create progress value. Fields readiness Readiness state. Declaration public PublisherReadiness readiness Field Value Type Description PublisherReadiness readyForCreate Progress to ready for create. Ready (but not necessarily recommended) when readyForCreate >= 1.0f; Declaration public float readyForCreate Field Value Type Description Single recommendedForCreate Progress to recommended for create. Recommended when recommendedForCreate >= 1.0f. Declaration public float recommendedForCreate Field Value Type Description Single"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.SpacePinASA.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.SpacePinASA.html",
    "title": "Class SpacePinASA | World Locking Tools Samples Documentation",
    "keywords": "Class SpacePinASA Inheritance Object SpacePinASA SpacePinASAManipulation Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public class SpacePinASA : SpacePinOrientable Properties IsReadyForPublish Ready to publish when we have a local peg and it is ready to publish. Declaration public bool IsReadyForPublish { get; } Property Value Type Description Boolean LocalPeg Accessor for local peg. Declaration public ILocalPeg LocalPeg { get; } Property Value Type Description ILocalPeg Properties Runtime access of properties. Declaration public Dictionary<string, string> Properties { get; } Property Value Type Description Dictionary < String , String > Publisher Accessor for publisher. This is managed by the binder. Declaration public IPublisher Publisher { get; set; } Property Value Type Description IPublisher SpacePinId Unique identifier for this space pin. Declaration public string SpacePinId { get; } Property Value Type Description String Methods ConfigureLocalPeg() Create a local peg based on current state (LockedPose). Declaration public void ConfigureLocalPeg() Remarks This typically happens when the SpacePinASA is locally manipulated into a new pose. SetLocalPeg(ILocalPeg) Accept the local peg assigned by the binder after it's been downloaded from the cloud. Declaration public void SetLocalPeg(ILocalPeg peg) Parameters Type Name Description ILocalPeg peg The local peg to take."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.SpacePinASA.KeyValPair.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.SpacePinASA.KeyValPair.html",
    "title": "Class SpacePinASA.KeyValPair | World Locking Tools Samples Documentation",
    "keywords": "Class SpacePinASA.KeyValPair Inheritance Object SpacePinASA.KeyValPair Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public class KeyValPair Fields key Declaration public string key Field Value Type Description String val Declaration public string val Field Value Type Description String"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.SpacePinBinder.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.SpacePinBinder.html",
    "title": "Class SpacePinBinder | World Locking Tools Samples Documentation",
    "keywords": "Class SpacePinBinder Implementation of the IBinder interface, managing the relationship between space pins and cloud anchors. Inheritance Object SpacePinBinder Implements IBinder Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public class SpacePinBinder : MonoBehaviour, IBinder Fields SpacePinIdKey The key for the key-value pair in the space pin/cloud anchor properties identifying the space pin id in the value. Declaration public static readonly string SpacePinIdKey Field Value Type Description String Properties IsReady If the binder is ready to execute tasks. Declaration public bool IsReady { get; } Property Value Type Description Boolean Remarks Reasons not be be ready include initialization not complete, or already busy on another task. Name The name of this binder. Declaration public string Name { get; } Property Value Type Description String PublisherStatus The current status of the publisher. Declaration public ReadinessStatus PublisherStatus { get; } Property Value Type Description ReadinessStatus SearchRadius Distance (roughly) to search from device when looking for cloud anchors using coarse relocation. Declaration public float SearchRadius { get; set; } Property Value Type Description Single SpacePins Declaration public IReadOnlyCollection<SpacePinASA> SpacePins { get; } Property Value Type Description IReadOnlyCollection < SpacePinASA > Methods AddSpacePin(SpacePinASA) Add a space pin to the list of managed pins. Declaration public bool AddSpacePin(SpacePinASA spacePin) Parameters Type Name Description SpacePinASA spacePin Pin to add. Returns Type Description Boolean True if not already there but added. Clear() Delete all known (bound) cloud anchors from the cloud, and erase their bindings. Declaration public Task<bool> Clear() Returns Type Description Task < Boolean > True on success. Remarks Bound space pins are unaffected, but will no longer be bound. CreateBinding(String, String) Set the cloud anchor id associated with this space pin. Declaration public bool CreateBinding(string spacePinId, string cloudAnchorId) Parameters Type Name Description String spacePinId Name of the space pin to be bound to this cloud id. String cloudAnchorId Cloud id to be bound to the space pin. Returns Type Description Boolean False if space pin is unknown. Space pin must be registered before being bound. Remarks A space pin must be bound to a cloud anchor id before it can be downloaded. Download() Pull down cloud anchors for all known bindings, and apply them to the bound space pins. Declaration public Task<bool> Download() Returns Type Description Task < Boolean > True on success. GetBindings() Known bindings between space pins and cloud anchors. Declaration public IReadOnlyList<SpacePinCloudBinding> GetBindings() Returns Type Description IReadOnlyList < SpacePinCloudBinding > Publish() Publish all active space pins to the cloud. Declaration public Task<bool> Publish() Returns Type Description Task < Boolean > True on success. Remarks Space pins which are previously published in this session, i.e. that have a binding to a cloud anchor, will have that cloud anchor deleted first, and a new binding created to the newly published cloud anchor. To be publishable, a SpacePin must have an ILocalPeg created from CreateLocalPeg(String, Pose) . The SpacePinASA manages this automatically. Publish(SpacePinASA) Publish the spacePin. Declaration public Task<bool> Publish(SpacePinASA spacePin) Parameters Type Name Description SpacePinASA spacePin SpacePinASA to publish Returns Type Description Task < Boolean > True on success. Remarks It may be this should be a private member. Purge() Find all cloud anchors in the area, delete them, and release their bindings. Declaration public Task<bool> Purge() Returns Type Description Task < Boolean > True on success. RemoveBinding(String) Erase a binding between a space pin and its corresponding cloud anchor. Declaration public bool RemoveBinding(string spacePinId) Parameters Type Name Description String spacePinId Space pin to unbind. Returns Type Description Boolean True if found and unbound. Remarks Neither the space pin nor the cloud anchor are affected by this, but will be independent of one another after. RemoveSpacePin(String) Remove the space pin binding associated with this SpacePin. Declaration public bool RemoveSpacePin(string spacePinId) Parameters Type Name Description String spacePinId Space pin id of binding to remove. Returns Type Description Boolean True if found and removed. Remarks Any binding between this pin and a cloud anchor is also severed. Search() Search for cloud anchors in the area, download them, and apply to associated space pins. Declaration public Task<bool> Search() Returns Type Description Task < Boolean > True on success UnPin() Declaration public void UnPin() Implements IBinder"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.SpacePinBinderFile.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.SpacePinBinderFile.html",
    "title": "Class SpacePinBinderFile | World Locking Tools Samples Documentation",
    "keywords": "Class SpacePinBinderFile Simple implementation of an IBindingOracle interface, which puts and gets binding from file locally. Inheritance Object SpacePinBinderFile Implements IBindingOracle Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public class SpacePinBinderFile : MonoBehaviour, IBindingOracle Remarks Note that this implements spatial persistence locally across sessions. Also, the file can be transferred from device to device, allowing shared spaces between HoloLens, Android, and iOS. A more sophisticated implementation would be very similar, but instead of saving to and loading from a local file, would save to and load from a shared location in the cloud. Properties Name Name of this oracle. Declaration public string Name { get; } Property Value Type Description String Methods Get(IBinder) Retrieve bindings from file and apply them to the input binder. Declaration public bool Get(IBinder binder) Parameters Type Name Description IBinder binder Binder to apply them to. Returns Type Description Boolean True on success. Put(IBinder) Pull bindings from the binder and save them to file. Declaration public bool Put(IBinder binder) Parameters Type Name Description IBinder binder Binder to pull from. Returns Type Description Boolean True on success. Implements IBindingOracle"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.SpacePinCloudBinding.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.ASA.SpacePinCloudBinding.html",
    "title": "Struct SpacePinCloudBinding | World Locking Tools Samples Documentation",
    "keywords": "Struct SpacePinCloudBinding A binding between a space pin and a cloud anchor, by their respective id's. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.WorldLocking.ASA Assembly : cs.temp.dll.dll Syntax public struct SpacePinCloudBinding Fields cloudAnchorId Declaration public string cloudAnchorId Field Value Type Description String spacePinId Declaration public string spacePinId Field Value Type Description String"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene.html",
    "title": "Namespace Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene | World Locking Tools Samples Documentation",
    "keywords": "Namespace Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene Classes PlantPlacard Simple script to instantiate and place a prefab in the scene where tapped. If the air tap hits a previously placed object, it will be deleted."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene.PlantPlacard.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene.PlantPlacard.html",
    "title": "Class PlantPlacard | World Locking Tools Samples Documentation",
    "keywords": "Class PlantPlacard Simple script to instantiate and place a prefab in the scene where tapped. If the air tap hits a previously placed object, it will be deleted. Inheritance Object PlantPlacard Implements IMixedRealityPointerHandler Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.AlignSubScene Assembly : cs.temp.dll.dll Syntax public class PlantPlacard : InputSystemGlobalHandlerListener, IMixedRealityPointerHandler Remarks This script assumes the prefab is of the layer \"Pillared\". Anything of layer \"Pillared\" will be considered to have been added by this script, and hence removed if tapped. Fields placardPrefab The prefab to instantiate and place in the scene. Declaration public GameObject placardPrefab Field Value Type Description GameObject Methods OnPointerClicked(MixedRealityPointerEventData) Process pointer clicked event if ray cast has result. Declaration public void OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDown(MixedRealityPointerEventData) No-op on pointer down. Declaration public void OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDragged(MixedRealityPointerEventData) No-op on pointer drag. Declaration public void OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerUp(MixedRealityPointerEventData) No-op on pointer up. Declaration public void OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData RegisterHandlers() Declaration protected override void RegisterHandlers() Start() Cache our layers at start. Declaration protected override void Start() TestLayer(GameObject, Int32) Declaration public static bool TestLayer(GameObject go, int layerTest) Parameters Type Name Description GameObject go Int32 layerTest Returns Type Description Boolean UnregisterHandlers() Declaration protected override void UnregisterHandlers() Implements IMixedRealityPointerHandler"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.html",
    "title": "Namespace Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins | World Locking Tools Samples Documentation",
    "keywords": "Namespace Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Classes QRCodeMiniManager The QRCodeMiniManager is a simple wrapper around the Microsoft.MixedReality.QR.QRCodeWatcher, to reissue qr code events on the main thread, where they can be acted on safely. QRSpacePinGroup A group of space pins with locations fed by reading QR codes placed in the physical environment. QRSpatialCoord Wrapper class for SpatialCoordinateSystem. ShowMarker Simple animation to highlight where a QR code has been scanned. Delegates QRCodeMiniManager.QRCodeFunction Notification callback for a QRCode event."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRCodeMiniManager.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRCodeMiniManager.html",
    "title": "Class QRCodeMiniManager | World Locking Tools Samples Documentation",
    "keywords": "Class QRCodeMiniManager The QRCodeMiniManager is a simple wrapper around the Microsoft.MixedReality.QR.QRCodeWatcher, to reissue qr code events on the main thread, where they can be acted on safely. Inheritance Object QRCodeMiniManager Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Assembly : cs.temp.dll.dll Syntax public class QRCodeMiniManager : MonoBehaviour Remarks The events are slightly simplified to the uniform pattern of the void QRCodeFunction(qrCode) defined here. No other interpretation or processing of the events is done. Events are received (on another thread) from the QRCodeWatcher, then reissued on the main thread in the next Update loop. Note that since they are received asynchronously, no exact guarantees can be made about the order in which they are called on the main thread. But in general (and in best effort) they will be called in the order in which the asynchronous events are dispatched, and on the next Update after the events are originally invoked. Properties IsSupported Get accessor for whether QRCodeWatcher reports as supported. Declaration public bool IsSupported { get; } Property Value Type Description Boolean OnQRAdded Callback when a new QR code is added. Declaration public QRCodeMiniManager.QRCodeFunction OnQRAdded { get; set; } Property Value Type Description QRCodeMiniManager.QRCodeFunction OnQREnumerated Callback when the enumeration is complete. Declaration public QRCodeMiniManager.QRCodeFunction OnQREnumerated { get; set; } Property Value Type Description QRCodeMiniManager.QRCodeFunction Remarks Cached QR codes will have Added and Updated events BEFORE the enumeration complete. Newly seen QR codes will only start to appear after the enumeration complete event. https://github.com/chgatla-microsoft/QRTracking/issues/2 OnQRRemoved Callback when a previously added QR code is removed. Declaration public QRCodeMiniManager.QRCodeFunction OnQRRemoved { get; set; } Property Value Type Description QRCodeMiniManager.QRCodeFunction OnQRUpdated Callback when a previously added QR code is updated. Declaration public QRCodeMiniManager.QRCodeFunction OnQRUpdated { get; set; } Property Value Type Description QRCodeMiniManager.QRCodeFunction"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRCodeMiniManager.QRCodeFunction.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRCodeMiniManager.QRCodeFunction.html",
    "title": "Delegate QRCodeMiniManager.QRCodeFunction | World Locking Tools Samples Documentation",
    "keywords": "Delegate QRCodeMiniManager.QRCodeFunction Notification callback for a QRCode event. Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Assembly : cs.temp.dll.dll Syntax public delegate void QRCodeFunction(QRCode qrCode); Parameters Type Name Description QRCode qrCode The code generating the event. Remarks Note that for the enumeration complete event, qrCode parameter is always null."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRSpacePinGroup.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRSpacePinGroup.html",
    "title": "Class QRSpacePinGroup | World Locking Tools Samples Documentation",
    "keywords": "Class QRSpacePinGroup A group of space pins with locations fed by reading QR codes placed in the physical environment. Inheritance Object QRSpacePinGroup Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Assembly : cs.temp.dll.dll Syntax public class QRSpacePinGroup : MonoBehaviour Properties MarkerHighlightPrefab Optional visual to draw at QR code position when detected. Declaration public GameObject MarkerHighlightPrefab { get; set; } Property Value Type Description GameObject SharedOrienter An orienter instance in the scene. If unset, one will be created. Declaration public Orienter SharedOrienter { get; set; } Property Value Type Description Orienter VirtualMarkers The virtual poses in the scene to be matched with the poses of the QR codes in the physical world. Declaration public List<Transform> VirtualMarkers { get; set; } Property Value Type Description List < Transform > Methods Reset() Clear back to the state before any QR codes had been detected. Declaration public void Reset()"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRSpatialCoord.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.QRSpatialCoord.html",
    "title": "Class QRSpatialCoord | World Locking Tools Samples Documentation",
    "keywords": "Class QRSpatialCoord Wrapper class for SpatialCoordinateSystem. Inheritance Object QRSpatialCoord Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Assembly : cs.temp.dll.dll Syntax public class QRSpatialCoord Remarks Provides a transform of the QR code's pose into Spongy space. Properties CurrentPose The last computed pose. Declaration public Pose CurrentPose { get; } Property Value Type Description Pose SpatialNodeId Accessor for spatial node id. Declaration public Guid SpatialNodeId { get; set; } Property Value Type Description Guid Methods ComputePose(out Pose) Compute the head relative pose for the spatial node id. Declaration public bool ComputePose(out Pose pose) Parameters Type Name Description Pose pose If return value is true, the newly computed pose, else the last pose computed. Returns Type Description Boolean True if a new pose was successfully computed. Remarks This ultimately relies on SpatialCoordinateSystem.TryGetTransformTo. TryGetTransformTo seems to fail for a while after the QR code is created. Or maybe just spurious failure. Haven't found any documentation on behavior so far. Main thing is to be prepared for failure, and just try back until success."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.ShowMarker.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins.ShowMarker.html",
    "title": "Class ShowMarker | World Locking Tools Samples Documentation",
    "keywords": "Class ShowMarker Simple animation to highlight where a QR code has been scanned. Inheritance Object ShowMarker Namespace : Microsoft.MixedReality.WorldLocking.Samples.Advanced.QRSpacePins Assembly : cs.temp.dll.dll Syntax public class ShowMarker : MonoBehaviour Fields maxSize Maximum scale factor to apply, i.e. scale at end of ramp up and beginning of ramp down. Declaration public float maxSize Field Value Type Description Single rampDown Declaration public float rampDown Field Value Type Description Single rampUp Declaration public float rampUp Field Value Type Description Single"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.html",
    "title": "Namespace Microsoft.MixedReality.WorldLocking.Samples | World Locking Tools Samples Documentation",
    "keywords": "Namespace Microsoft.MixedReality.WorldLocking.Samples Classes SimpleTagalong UX Simple bit of UX to toggle and display the status of the WorldLockingManager."
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.SimpleTagalong.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.SimpleTagalong.html",
    "title": "Class SimpleTagalong | World Locking Tools Samples Documentation",
    "keywords": "Class SimpleTagalong Inheritance Object SimpleTagalong Namespace : Microsoft.MixedReality.WorldLocking.Samples Assembly : cs.temp.dll.dll Syntax public class SimpleTagalong : MonoBehaviour Fields lerpTime Declaration public float lerpTime Field Value Type Description Single maxAngle Declaration public float maxAngle Field Value Type Description Single"
  },
  "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.UX.html": {
    "href": "DocGen/Temp/api/Microsoft.MixedReality.WorldLocking.Samples.UX.html",
    "title": "Class UX | World Locking Tools Samples Documentation",
    "keywords": "Class UX Simple bit of UX to toggle and display the status of the WorldLockingManager. Inheritance Object UX Namespace : Microsoft.MixedReality.WorldLocking.Samples Assembly : cs.temp.dll.dll Syntax public class UX : MonoBehaviour Fields statusText Declaration public TextMesh statusText Field Value Type Description TextMesh targets Declaration public List<GameObject> targets Field Value Type Description List < GameObject > Methods OnToggleManager() Declaration public void OnToggleManager()"
  },
  "README.html": {
    "href": "README.html",
    "title": "WLT Samples | World Locking Tools Samples Documentation",
    "keywords": "WLT Samples The World Locking Tools - Samples (WLT-S) repository hopes to give you isolated independent examples, or even starting points, for anything you might do with the World Locking Tools for Unity. Useful links This documentation on github.io World Locking Tools Samples github repo . Getting started with Samples . World Locking Tools for Unity (WLT) github repo . World Locking Tools for Unity (WLT) documentation landing page . Prerequisites The basics of building and deploying a HoloLens application from Unity are assumed. If you aren't familiar with that, here's a good place to start . Or if you want to go straight to HoloLens2, then here . For the Advanced samples, obviously familiarity with the basic World Locking Tools for Unity is assumed. Start here . The Tutorials are most useful as auxiliary information for the documentation. Start with the documentation, and jump to the Tutorials when the documentation directs you there for illustration. Contributing in plain language Some simple talk about contributing to this project . Contributing This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com . When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. Microsoft Open Source Code of Conduct This project has adopted the Microsoft Open Source Code of Conduct . Resources: Microsoft Open Source Code of Conduct Microsoft Code of Conduct FAQ Contact opencode@microsoft.com with questions or concerns"
  },
  "SECURITY.html": {
    "href": "SECURITY.html",
    "title": "Security | World Locking Tools Samples Documentation",
    "keywords": "Security <!-- BEGIN MICROSOFT SECURITY.MD V0.0.3 BLOCK --> Microsoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include Microsoft , Azure , DotNet , AspNet , Xamarin , and our GitHub organizations . If you believe you have found a security vulnerability in any Microsoft-owned repository that meets Microsoft's Microsoft's definition of a security vulnerability of a security vulnerability, please report it to us as described below. Reporting Security Issues Please do not report security vulnerabilities through public GitHub issues. Instead, please report them to the Microsoft Security Response Center (MSRC) at https://msrc.microsoft.com/create-report . If you prefer to submit without logging in, send email to secure@microsoft.com . If possible, encrypt your message with our PGP key; please download it from the the Microsoft Security Response Center PGP Key page . You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at microsoft.com/msrc . Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue: Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.) Full paths of source file(s) related to the manifestation of the issue The location of the affected source code (tag/branch/commit or direct URL) Any special configuration required to reproduce the issue Step-by-step instructions to reproduce the issue Proof-of-concept or exploit code (if possible) Impact of the issue, including how an attacker might exploit the issue This information will help us triage your report more quickly. If you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our Microsoft Bug Bounty Program page for more details about our active programs. Preferred Languages We prefer all communications to be in English. Policy Microsoft follows the principle of Coordinated Vulnerability Disclosure . <!-- END MICROSOFT SECURITY.MD BLOCK -->"
  },
  "Tutorial/01_Minimal/01_Minimal.html": {
    "href": "Tutorial/01_Minimal/01_Minimal.html",
    "title": "Minimal World Locking Tools (WLT) setup for a world-locked application | World Locking Tools Samples Documentation",
    "keywords": "Minimal World Locking Tools (WLT) setup for a world-locked application For streamlined installation using the latest available tools, refer to this article in the main World Locking Tools documentation. This Tutorial will walk you through manually adding the minimum required subset of the WLT to a project, in order to get world-locked behavior out of all the content in that application, without the need for application maintained WorldAnchors, or any other special behavior. This tutorial refers to the 01_Minimal sample for reference. The simple application being world-locked here is the simplest possible Unity AR application. Note that the setup is even simpler for MRTK applications. Any differences between adding to a bare versus MRTK app are noted in the steps. For tips on getting started with HoloLens development, see the final section of this article. Project source assets https://github.com/microsoft/MixedReality-WorldLockingTools-Samples/tree/master/Tutorial/01_Minimal World Locking Tools specific setup Add an Adjustment node, and attach the Main Camera object to it. It should look like this: Or, if using MRTK, like this: Install the FrozenWorld Engine DLL. a. Install NuGet for Unity . It's really a phenomenal piece of technology, you should have it anyway. If for any reason you can't use NuGet for Unity, follow the steps for Manual FrozenWorld Engine DLL Installation , and proceed to step 3. b. With NuGet for Unity installed, in Unity, go to NuGet > Manage NuGet Packages Search for FrozenWorld.Engine, and install the latest version of Microsoft.MixedReality.Unity.FrozenWorld.Engine. Download and import the latest version of the Microsoft.MixedReality.Unity.WorldLockingTools.CoreEngine unity package from releases . In your Unity Project, go to Assets > WorldLocking.Core > Prefabs Drag the WorldLockingManager prefab into your scene. At this point your project should look a lot like 01_Minimal . A few visual reference points (colored capsules) have been added to the MinimalScene in 01_Minimal , just so you can see that it is working (the capsules remain fixed relative to real world features around them during the session, and even persisting across sessions). Bonus round - adding anchor graph visualization The application as-is will now do basic world locking. Any objects you add to the scene will be placed in the physical world relative to the head position on first running the application. They will then remain in fixed pose relative to the physical world through the session, and even across sessions. That's all your application requires for basic world-locking. It can be useful to visualize the world anchor graph which the World Locking Tools creates and maintains as the underlying stabilization structure. Doing so is quite easy. Download and import the version of Microsoft.MixedReality.Unity.WorldLockingTools.Tools which corresponds with the CoreEngine package you previously imported. If you didn't already, you will now have a Mixed Reality dropdown menu. Within it, find the World Locking Tools section. The Configure scene option automates the configuration you did in the previous section. Now select Add development visualizers . That's it. Now when you deploy, you will see the graph of WorldAnchor nodes created under the hood, along with some other helpful visualizations. More description is available in the Tools documentation . When you decide you don't need the visualizations anymore, you can either disable the AnchorGraphVisual in the scene, delete it, or run the Remove development visualizers option from the same World Locking Tools menu. Assumed HoloLens deployment background If unfamiliar with building, deploying, and running applications on the HoloLens family of devices, a good place to start is with HoloLens and HoloLens 2 tutorials. In addition, here are some emphasized tips common to all HoloLens development. Note that these are handled automatically by MRTK. Check the camera clear color. The Clear Flags should be \"Solid Color\", and the color should be transparent black (0,0,0,0). Check permissions. Project Settings > Player > Publishing Settings > Capabilities You generally want the following enabled: InternetClient InternetClientServer PrivateNetworkClientServer WebCam Microphone GazeInput"
  },
  "Tutorial/Tutorial.html": {
    "href": "Tutorial/Tutorial.html",
    "title": "Tutorials | World Locking Tools Samples Documentation",
    "keywords": "Tutorials This section of the Samples holds stripped down simplified projects, each highlighting a single concept. Applications built from the projects in the Tutorials section don't generally don't accomplish anything useful or complex, but serve as supplemental material for the documentation. See also Minimal - The minimal set of World Locking Tools introduced into a project to do basic world-locking."
  }
}